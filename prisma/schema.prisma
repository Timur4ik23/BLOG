// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstName    String?  @db.VarChar(25)
  lastName     String?  @db.VarChar(25)
  userName     String   @db.VarChar(15) @unique
  email        String   @db.VarChar(50) @unique
  password     String   @db.VarChar(20)
  avatar       String?  @db.VarChar(255)
  subscription Boolean

<<<<<<< Updated upstream
  posts        Post[]
  comments     Comment[]
  likes        Like[]
=======


  comments       Comment[]
  likes          Like[]
  accounts       Account[]   
  sessions       Session[]   

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
>>>>>>> Stashed changes
}

model Post {
<<<<<<< Updated upstream
  id           String   @id @default(uuid())
  title        String   @db.VarChar(60)
  previewText  String   @db.VarChar(100)
  content      String
  image        String   @db.VarChar(255)
  category     String   @db.VarChar(11)
  timestamp    DateTime @db.Date

  authorId     String
  author       User     @relation(fields: [authorId], references: [id])
  comments     Comment[]
  likes        Like[]
=======
  id            String   @id @default(uuid())
  title         String   @db.VarChar(60)
  previewText   String   @db.VarChar(100)
  content       String
  image         String   @db.VarChar(255)
  category      String   @db.VarChar(11)
  timestamp     DateTime @default(now()) 


  comments      Comment[]
  likes         Like[]
>>>>>>> Stashed changes
}

model Comment {
  id           String   @id @default(uuid())
  userId       String
  postId       String
  timestamp    DateTime
  content      String   @db.VarChar(350)

  user         User     @relation(fields: [userId], references: [id])
  post         Post     @relation(fields: [postId], references: [id])
}

model Like {
  iid           String   @id @default(uuid())
  userId       String
  postId       String

  user         User     @relation(fields: [userId], references: [id])
  post         Post     @relation(fields: [postId], references: [id])
}

